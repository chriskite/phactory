<?php

/**
 * Test class for Phactory_Row.
 * Generated by PHPUnit on 2010-06-28 at 09:17:32.
 */
class Phactory_RowTest extends PHPUnit_Framework_TestCase
{
	protected $pdo;

    protected function setUp()
    {
        require_once PHACTORY_PATH . '/Phactory.php';
        require_once PHACTORY_PATH . '/Phactory/Row.php';
		$this->pdo = new PDO("sqlite:test.db");
        $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        $this->pdo->exec("CREATE TABLE `users` ( id INTEGER PRIMARY KEY, name TEXT )");

        Phactory::setConnection($this->pdo);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {        
		Phactory::reset();

        $this->pdo->exec("DROP TABLE `users`");
    }

    public function testGetId()
    {
        $row = new Phactory_Row('user', array('name' => 'testuser'));
        $row->save();

        $this->assertEquals($row->getId(), $row->id);
    }

    public function testSave()
    {
		$name = "testuser";
		
		//create Phactory_Row object and add user to table
		$phactory_row = new Phactory_Row('user', array('name' => $name));
		$phactory_row->save();
		
        // retrieve expected user from database
        $stmt = $this->pdo->query("SELECT * FROM `users`");
        $db_user = $stmt->fetch();

		// test retrieved db row
        $this->assertEquals($db_user['name'], $name);
    }

    public function testToArray()
    {
        $data = array('name' => 'testname');
        $row = new Phactory_Row('user', $data);
        $arr = $row->toArray();
        $this->assertEquals($data, $arr);

        //changing the returned array shouldn't change the row
        $arr['name'] = $name + 'foo';
        $this->assertNotEquals($row->name, $arr['name']);
    }

    public function testToArrayAfterCreate()
    {
        $data = array('id' => 1, 'name' => 'testname');
        Phactory::define('user', $data);
        $user = Phactory::create('user');

        $this->assertEquals($data, $user->toArray());
    }

    public function testFill()
    {
        $data = array('id' => 1);
        $row = new Phactory_Row('user', $data);
        $arr = $row->toArray();
        
        $this->assertEquals($data, $arr);

        $data['name'] = null;
        $arr = $row->fill()->toArray();

        $this->assertEquals($data, $arr);
    }

}
?>
